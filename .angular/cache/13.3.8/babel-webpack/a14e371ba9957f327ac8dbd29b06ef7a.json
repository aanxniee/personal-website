{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, RendererFactory2, Optional, Inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n/**\n * InjectionToken to override default options\n *\n * @example\n *\n * providers: [\n *   {\n *     provide: DARK_MODE_OPTIONS,\n *     useValue: {\n *       darkModeClass: 'my-dark-mode',\n *       lightModeClass: 'my-light-mode',\n *     },\n *   },\n * ]\n */\n\nimport * as ɵngcc0 from '@angular/core';\nconst DARK_MODE_OPTIONS = new InjectionToken('DARK_MODE_OPTIONS');\n/**\n * Default options used in DarkModeService\n */\n\nconst defaultOptions = {\n  darkModeClass: 'dark-mode',\n  lightModeClass: 'light-mode',\n  preloadingClass: 'dark-mode-preloading',\n  storageKey: 'dark-mode',\n  element: document.body\n};\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\n\nfunction isNil(value) {\n  return value === null || value === undefined;\n}\n\nconst prefersDarkSchemeQuery = '(prefers-color-scheme: dark)';\nlet MediaQueryService = /*#__PURE__*/(() => {\n  class MediaQueryService {\n    matchMedia(query) {\n      return window.matchMedia(query);\n    }\n\n    prefersDarkMode() {\n      return this.matchMedia(prefersDarkSchemeQuery).matches;\n    }\n\n  }\n\n  MediaQueryService.ɵfac = function MediaQueryService_Factory(t) {\n    return new (t || MediaQueryService)();\n  };\n\n  MediaQueryService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function MediaQueryService_Factory() {\n      return new MediaQueryService();\n    },\n    token: MediaQueryService,\n    providedIn: \"root\"\n  });\n  return MediaQueryService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DarkModeService = /*#__PURE__*/(() => {\n  class DarkModeService {\n    constructor(rendererFactory, mediaQueryService, // prettier-ignore\n    providedOptions) {\n      this.rendererFactory = rendererFactory;\n      this.mediaQueryService = mediaQueryService;\n      this.providedOptions = providedOptions;\n      this.options = Object.assign(Object.assign({}, defaultOptions), this.providedOptions || {});\n      this.renderer = this.rendererFactory.createRenderer(null, null);\n      this.darkModeSubject$ = new BehaviorSubject(this.getInitialDarkModeValue());\n      this.darkModeSubject$.getValue() ? this.enable() : this.disable();\n      this.removePreloadingClass();\n    }\n    /**\n     * An Observable representing current dark mode.\n     * Only fires the initial and distinct values.\n     */\n\n\n    get darkMode$() {\n      return this.darkModeSubject$.asObservable().pipe(distinctUntilChanged());\n    }\n\n    toggle() {\n      this.darkModeSubject$.getValue() ? this.disable() : this.enable();\n    }\n\n    enable() {\n      const {\n        element,\n        darkModeClass,\n        lightModeClass\n      } = this.options;\n      this.renderer.removeClass(element, lightModeClass);\n      this.renderer.addClass(element, darkModeClass);\n      this.saveDarkModeToStorage(true);\n      this.darkModeSubject$.next(true);\n    }\n\n    disable() {\n      const {\n        element,\n        darkModeClass,\n        lightModeClass\n      } = this.options;\n      this.renderer.removeClass(element, darkModeClass);\n      this.renderer.addClass(element, lightModeClass);\n      this.saveDarkModeToStorage(false);\n      this.darkModeSubject$.next(false);\n    }\n\n    getInitialDarkModeValue() {\n      const darkModeFromStorage = this.getDarkModeFromStorage();\n\n      if (isNil(darkModeFromStorage)) {\n        return this.mediaQueryService.prefersDarkMode();\n      }\n\n      return darkModeFromStorage;\n    }\n\n    saveDarkModeToStorage(darkMode) {\n      localStorage.setItem(this.options.storageKey, JSON.stringify({\n        darkMode\n      }));\n    }\n\n    getDarkModeFromStorage() {\n      var _a;\n\n      const storageItem = localStorage.getItem(this.options.storageKey);\n\n      if (storageItem) {\n        try {\n          return (_a = JSON.parse(storageItem)) === null || _a === void 0 ? void 0 : _a.darkMode;\n        } catch (error) {\n          console.error('Invalid darkMode localStorage item:', storageItem, 'falling back to color scheme media query');\n        }\n      }\n\n      return null;\n    }\n\n    removePreloadingClass() {\n      // defer to next tick\n      setTimeout(() => {\n        this.renderer.removeClass(this.options.element, this.options.preloadingClass);\n      });\n    }\n\n  }\n\n  DarkModeService.ɵfac = function DarkModeService_Factory(t) {\n    return new (t || DarkModeService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(MediaQueryService), ɵngcc0.ɵɵinject(DARK_MODE_OPTIONS, 8));\n  };\n\n  DarkModeService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function DarkModeService_Factory() {\n      return new DarkModeService(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(MediaQueryService), i0.ɵɵinject(DARK_MODE_OPTIONS, 8));\n    },\n    token: DarkModeService,\n    providedIn: \"root\"\n  });\n  return DarkModeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of angular-dark-mode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DARK_MODE_OPTIONS, DarkModeService, MediaQueryService as ɵa }; //# sourceMappingURL=angular-dark-mode.js.map","map":null,"metadata":{},"sourceType":"module"}